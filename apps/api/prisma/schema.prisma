generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPPORT
  AUDITOR
  MERCHANT
  GUEST
}

enum TransferHolds {
  ACTIVE
  CONSUMED
  RELEASED
  EXPIRED
}

enum LedgerTransactionType {
  DEPOSIT
  WITHDRAW_PENDING
  WITHDRAW_SETTLED
  WITHDRAW_FAILED
  TRANSFER_IN
  TRANSFER_OUT
}

enum LedgerEntryAccount {
  WALLET
  SETTLEMENT
  FEE
  SYSTEM
  EXTERNAL
}

enum TransferStatus {
  CREATED
  RESERVED
  SETTLED
  FAILED
  COMPLETED
}

enum TransferDestIdentifier {
  IBAN
  CARD
}

enum TransferType {
  DEPOSIT
  WITHDRAW
  INTERNAL
}

model User {
  id              String   @id @default(uuid())
  userKey         String   @unique
  username        String?  @unique
  profileImageUrl String?
  phone           String   @unique
  isActive        Boolean  @default(true)
  isSuspended     Boolean  @default(false)
  role            UserRole @default(USER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  refreshTokens RefreshToken[]
  accounts      Account[]      @relation("UserAccounts")

  @@index([createdAt])
  @@index([isActive, isSuspended])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([revoked])
  @@index([expiresAt])
}

model Account {
  id         String   @id @default(uuid())
  accountKey String   @unique
  userId     String
  type       String   @default("PERSONAL") // PERSONAL | BUSINESS
  status     String   @default("ACTIVE")
  createdAt  DateTime @default(now())

  user    User     @relation("UserAccounts", fields: [userId], references: [id])
  wallets Wallet[]

  @@index([userId])
}

model Wallet {
  id              String   @id @default(uuid())
  walletKey       String   @unique
  accountId       String   @unique
  walletType      String
  balance         Decimal  @default(0.00)
  available       Decimal  @default(0.00)
  currency        String   @default("IRR")
  cardNumber      String?  @unique
  accountNumber   String?  @unique
  shabaNumber     String?  @unique
  icon            String?
  backgroundColor String?
  name            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isRemoved       Boolean  @default(false)

  ledgerEntries LedgerEntry[]
  holds         Hold[]        @relation("WalletHolds")
  account       Account       @relation(fields: [accountId], references: [id])

  @@index([walletKey])
  @@index([accountId])
  @@index([walletType])
  @@index([cardNumber])
  @@index([accountNumber])
  @@index([shabaNumber])
}

model Hold {
  id          String        @id @default(uuid())
  holdKey     String        @unique
  walletKey   String
  amount      BigInt
  status      TransferHolds @default(ACTIVE)
  transferKey String?
  createdAt   DateTime      @default(now())
  expiresAt   DateTime?

  wallet Wallet @relation("WalletHolds", fields: [walletKey], references: [walletKey])

  @@index([walletKey])
}

model Transfer {
  id                   String         @id @default(uuid())
  transferKey          String         @unique
  idempotencyKey       String?        @unique
  type                 TransferType
  amount               BigInt
  currency             String         @default("IRR")
  sourceWalletKey      String
  destinationWalletKey String
  destIdentifier       String?
  status               TransferStatus @default(CREATED)
  externalRef          String?
  metadata             Json?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@index([transferKey])
  @@index([idempotencyKey])
}

model LedgerTransaction {
  id          String                @id @default(uuid())
  ledgerTxKey String                @unique
  transferKey String?
  type        LedgerTransactionType
  createdAt   DateTime              @default(now())

  ledgerEntries LedgerEntry[]
}

model LedgerEntry {
  id             String                @id @default(uuid())
  ledgerEntryKey String                @unique
  ledgerTxKey    String
  walletKey      String?
  account        LedgerEntryAccount
  amount         BigInt
  type           LedgerTransactionType
  metadata       Json?
  createdAt      DateTime              @default(now())

  ledgerTx LedgerTransaction @relation(fields: [ledgerTxKey], references: [ledgerTxKey], onDelete: Cascade)
  wallet   Wallet?           @relation(fields: [walletKey], references: [walletKey])

  @@index([walletKey])
  @@index([account])
  @@index([ledgerTxKey])
}

model OutboxEvent {
  id            String    @id @default(uuid())
  aggregateId   String?
  aggregateType String?
  type          String
  payload       Json
  processed     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  processedAt   DateTime?
}
